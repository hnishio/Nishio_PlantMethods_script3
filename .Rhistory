`b_ex_2.5%` <- `b_ex_97.5%` <- `b_ex_50%` <-
`w_2.5%` <- `w_97.5%` <- `w_50%` <- NULL
# Create output directories
if(file.exists(paste0(out, "/csv"))==F){
dir.create(paste0(out, "/csv"), recursive=T)
}
if(file.exists(paste0(out, "/pdf"))==F & graph == T){
dir.create(paste0(out, "/pdf"), recursive=T)
}
if(file.exists(paste0(out, "/diagnosis"))==F & diagnosis == T){
dir.create(paste0(out, "/diagnosis"), recursive=T)
}
if(file.exists("tmp")==T){
unlink("tmp", recursive = T)
dir.create("tmp", recursive=T)
output_dir <- "tmp"
}else{
dir.create("tmp", recursive=T)
output_dir <- "tmp"
}
# Adjust data.frame
if(!is.null(mvtime)){
if(ncol(mvtime) > 5){
mvtime <- mvtime[,1:4]
names(mvtime)[1:4] <- c("cell", "each", "visual", "predicted")
}else{
mvtime <- mvtime[,1:3]
names(mvtime)[1:3] <- c("cell", "each", "predicted")
}
distance <- NULL
for(i in 1:length(cell_list)){
distance <- c(distance, as.numeric(cell_list[[i]][min(which(cell_list[[i]]$ex == 1))-1,-(1:2)]))
}
mvtime$distance <- distance
# Remove infinity from cell_list and mvtime
null_cell <- mvtime[is.infinite(rowSums(mvtime)),]$cell
null_each <- mvtime[is.infinite(rowSums(mvtime)),]$each
if(length(null_cell) > 0){
for(i in 1:length(null_cell)){
cell_list[[null_cell[i]]] <- cell_list[[null_cell[i]]][,-(null_each[i]+2)]
mvtime <- mvtime[!is.infinite(rowSums(mvtime)),]
}
}
# Remove NA from cell_list and mvtime
null_cell <- mvtime[is.na(rowSums(mvtime)),]$cell
null_each <- mvtime[is.na(rowSums(mvtime)),]$each
if(length(null_cell) > 0){
for(i in 1:length(null_cell)){
cell_list[[null_cell[i]]] <- cell_list[[null_cell[i]]][,-(null_each[i]+2)]
mvtime <- mvtime[!is.na(rowSums(mvtime)),]
}
}
}#if(!is.null(mvtime)){
# Compile stan file
if(is.null(mvtime)){
stan_file <- system.file("extdata", "common_model_mvtimenull.stan", package = "cellssm")
}else{
stan_file <- system.file("extdata", "common_model.stan", package = "cellssm")
}
model <- cmdstanr::cmdstan_model(stan_file)
i
i=3
# File name
if(!is.null(df_idx)){
file_name <- paste0(df_name, df_idx[i])
start_time <- mvtime$predicted[mvtime$cell==df_idx[i]]
}else{
file_name <- paste0(df_name, i)
start_time <- mvtime$predicted[mvtime$cell==i]
}
# Estimation of observation error
sd_vel_all <- NULL
for (j in 1:(ncol(cell_list[[i]])-2)){
vel <- diff(cell_list[[i]][,j+2])
sp_vel <- stats::smooth.spline(1:length(vel), vel)
pred_vel <- stats::predict(sp_vel, 1:length(vel))
sd_vel <- stats::sd(vel - pred_vel$y)
sd_vel_all <- c(sd_vel_all, sd_vel)
}
obs <- stats::median(sd_vel_all)
# Prepare data_list
if(is.null(mvtime)){
data_list <- list(
N = nrow(cell_list[[i]])-1,
N_ex = length(which(cell_list[[i]]$ex==1)),
N_each = ncol(cell_list[[i]])-2,
ex = cell_list[[i]]$ex[-1],
Y = apply(cell_list[[i]][,-(1:2)], 2, diff),
obs = obs
)
}else{
data_list <- list(
N = nrow(cell_list[[i]])-1,
N_ex = length(which(cell_list[[i]]$ex==1)),
N_each = ncol(cell_list[[i]])-2,
ex = cell_list[[i]]$ex[-1],
Y = apply(cell_list[[i]][,-(1:2)], 2, diff),
obs = obs,
start = start_time
)
}
# Get the boundary indexes of ex
zero_idx <- which(data_list$ex == 0)
boundary1 <- zero_idx[which(diff(zero_idx) != 1)]
boundary2 <- zero_idx[which(diff(zero_idx) != 1) + 1]
if(length(zero_idx[which(diff(zero_idx) != 1)]) < 1){
boundary1 <- max(zero_idx)
boundary2 <- data_list$N + 1
}
# Modify data_list
data_list <- c(data_list, list(boundary1=boundary1, boundary2=boundary2))
# Execute MCMC
fit <- model$sample(
data = data_list,
seed = seed,
iter_warmup = warmup*thin,
iter_sampling = sampling*thin,
chains = 4,
parallel_chains = 4,
refresh = floor(warmup/2.5*thin),
#show_messages = F,
#sig_figs = 4,
output_dir = output_dir,
output_basename = file_name,
adapt_delta = 0.95,
thin = thin
)
data_list
4  9  3  6  9  7 11  4  4 22 20 15 12
# Load packages
library(cellssm)
cmdstanr::set_cmdstan_path("~/cmdstan/")
# Create output directory
out <- "15_ssm_common"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
# Load data
cell1 <- read.csv("data/WT_cell1_v4.csv")
cell2 <- read.csv("data/cell2.csv")
cell3 <- read.csv("data/cell3.csv")
cell4 <- read.csv("data/cell4.csv")
cell5 <- read.csv("data/WT_cell5_v3.csv")
cell6 <- read.csv("data/WT_cell6_v3.csv")
cell7 <- read.csv("data/WT_cell7_v3.csv")
cell8 <- read.csv("data/WT_cell8_v3.csv")
cell9 <- read.csv("data/WT_cell9_v3.csv")
cell_list <- list(cell1, cell2, cell3, cell4, cell5, cell6, cell7, cell8, cell9)
mvtime <- as.data.frame(data.table::fread("04_nomodel/nomodel_chloroplast_mvtime.csv"))
## Execution of state-space modeling
ssm_common(cell_list = cell_list, mvtime = mvtime, out = out,
res_name = "chloroplast", ex_name = "microbeam",
unit1 = "micrometer", unit2 = "min")
# Load packages
library(cellssm)
cmdstanr::set_cmdstan_path("~/cmdstan/")
# Create output directory
out <- "16_nucleus_ssm_individual_stepwise=c(99, 90)"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
# Load data
cell1 <- read.csv("data/nucleus1.csv")
cell2 <- read.csv("data/nucleus2.csv")
cell_list <- list(cell1, cell2)
# Execution of state-space modeling
ssm_individual(cell_list = cell_list, out = out,
res_name = "nucleus", ex_name = "microbeam",
unit1 = "micrometer", unit2 = "min",
stepwise = c(99, 90))
# Load packages
library(cellssm)
cmdstanr::set_cmdstan_path("~/cmdstan/")
# Create output directory
out <- "17_nucleus_ssm_KFAS_stepwise=c(99, 90)"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
# Load data
cell1 <- read.csv("data/nucleus1.csv")
cell2 <- read.csv("data/nucleus2.csv")
cell_list <- list(cell1, cell2)
# Execution of state-space modeling
ssm_KFAS(cell_list = cell_list, out = out,
res_name = "nucleus", ex_name = "microbeam",
unit1 = "micrometer", unit2 = "min",
stepwise = c(99, 90))
help(nomodel)
# Load packages
library(cellssm)
# Create output directory
out <- "18_nucleus_nomodel"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
# Load data
cell1 <- read.csv("data/nucleus1.csv")
cell2 <- read.csv("data/nucleus2.csv")
cell_list <- list(cell1, cell2)
# Execution of state-space modeling
nomodel(cell_list = cell_list, out = out,
res_name = "nucleus", ex_name = "microbeam",
unit1 = "micrometer", unit2 = "min")
# Load packages
library(cellssm)
library(ggplot2)
library(patchwork)
# Create an output directory
out <- "01_dist_vis"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
# Load data of chloroplasts
cell1 <- read.csv("data/WT_cell1_v4.csv")
cell2 <- read.csv("data/cell2.csv")
cell3 <- read.csv("data/cell3.csv")
cell4 <- read.csv("data/cell4.csv")
cell5 <- read.csv("data/WT_cell5_v3.csv")
cell6 <- read.csv("data/WT_cell6_v3.csv")
cell7 <- read.csv("data/WT_cell7_v3.csv")
cell8 <- read.csv("data/WT_cell8_v3.csv")
cell9 <- read.csv("data/WT_cell9_v3.csv")
cell_list <- list(cell1, cell2, cell3, cell4, cell5, cell6, cell7, cell8, cell9)
# Plotting
glist <- dist_vis(cell_list = cell_list,
res_name = "chloroplast", ex_name = "microbeam",
unit1 = "micrometer", unit2 = "min")
g <- (glist[[1]] + labs(tag = "A")) + (glist[[2]] + labs(tag = "B")) + (glist[[3]] + labs(tag = "C")) +
(glist[[4]] + labs(tag = "D")) + (glist[[5]] + labs(tag = "E")) + (glist[[6]] + labs(tag = "F")) +
(glist[[7]] + labs(tag = "G")) + (glist[[8]] + labs(tag = "H")) + (glist[[9]] + labs(tag = "I")) +
(glist[[10]] + labs(tag = "J")) + (glist[[11]] + labs(tag = "K")) +
((g_sig + labs(tag = "L")) + void + plot_layout(ncol = 2, widths = c(1,1.5))) +
plot_layout(ncol = 2) &
theme(plot.tag = element_text(size = 12, face = "bold"))
g <- (glist[[1]] + labs(tag = "A")) + (glist[[2]] + labs(tag = "B")) + (glist[[3]] + labs(tag = "C")) +
(glist[[4]] + labs(tag = "D")) + (glist[[5]] + labs(tag = "E")) + (glist[[6]] + labs(tag = "F")) +
(glist[[7]] + labs(tag = "G")) + (glist[[8]] + labs(tag = "H")) + (glist[[9]] + labs(tag = "I")) +
plot_layout(ncol = 2) &
theme(plot.tag = element_text(size = 12, face = "bold"))
ggsave(paste0(out, "/dist_vis.pdf"),
g, height = 220, width = 160, units = "mm")
g <- (glist[[1]] + labs(tag = "B")) + (glist[[2]] + labs(tag = "C")) + (glist[[3]] + labs(tag = "D")) +
(glist[[4]] + labs(tag = "E")) + (glist[[5]] + labs(tag = "F")) + (glist[[6]] + labs(tag = "G")) +
(glist[[7]] + labs(tag = "H")) + (glist[[8]] + labs(tag = "I")) + (glist[[9]] + labs(tag = "J")) +
plot_layout(ncol = 2) &
theme(plot.tag = element_text(size = 12, face = "bold"))
void <- ggplot() + theme_void()
g <- (void + labs(tag = "A")) +
(glist[[1]] + labs(tag = "B")) + (glist[[2]] + labs(tag = "C")) + (glist[[3]] + labs(tag = "D")) +
(glist[[4]] + labs(tag = "E")) + (glist[[5]] + labs(tag = "F")) + (glist[[6]] + labs(tag = "G")) +
(glist[[7]] + labs(tag = "H")) + (glist[[8]] + labs(tag = "I")) + (glist[[9]] + labs(tag = "J")) +
plot_layout(ncol = 2) &
theme(plot.tag = element_text(size = 12, face = "bold"))
ggsave(paste0(out, "/dist_vis.pdf"),
g, height = 220, width = 160, units = "mm")
25.4*6.5
25.4*5.5
# Load packages
library(cellssm)
cmdstanr::set_cmdstan_path("~/cmdstan/")
help("ssm_individual")
# Create output directory
out <- "19_paramecium_ssm_individual_stepwise=c(99, 90)"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
# Load data
data("Paramecium")
cell_list <- list(Paramecium)
# Execution of state-space modeling
ssm_individual(cell_list = cell_list, out = out,
ex_sign = "positive", df_name = "experiment",
res_name = "Paramecium", ex_name = "heat",
unit1 = "millimeter", unit2 = "sec",
stepwise = c(99, 90))
# Load packages
library(cellssm)
# Create output directory
out <- "20_paramecium_ssm_KFAS_stepwise=c(99, 90)"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
help("ssm_KFAS")
# Load data
data("Paramecium")
cell_list <- list(Paramecium)
# Execution of state-space modeling
ssm_KFAS(cell_list = cell_list, out = out,
ex_sign = "positive", df_name = "experiment",
res_name = "Paramecium", ex_name = "heat",
unit1 = "millimeter", unit2 = "sec",
stepwise = c(99, 90))
# Load packages
library(cellssm)
# Create output directory
out <- "21_paramecium_nomodel"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
help(nomodel)
# Load data
data("Paramecium")
cell_list <- list(Paramecium)
# Execution of state-space modeling
nomodel(cell_list = cell_list, out = out,
ex_sign = "positive", fold = 1, df_name = "experiment",
res_name = "Paramecium", ex_name = "heat",
unit1 = "millimeter", unit2 = "sec")
# Execution of state-space modeling
nomodel(cell_list = cell_list, out = out,
ex_sign = "positive", df_name = "experiment",
res_name = "Paramecium", ex_name = "heat",
unit1 = "millimeter", unit2 = "sec")
warnings()
# Execution of state-space modeling
nomodel(cell_list = cell_list, out = out,
ex_sign = "positive", fold = 1, df_name = "experiment",
res_name = "Paramecium", ex_name = "heat",
unit1 = "millimeter", unit2 = "sec")
# Load packages
library(cellssm)
library(ggplot2)
library(patchwork)
# Create output directory
out <- "11_lm_signal_nomodel"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
# Load data
cell1 <- read.csv("data/WT_cell1_v4.csv")
cell2 <- read.csv("data/cell2.csv")
cell3 <- read.csv("data/cell3.csv")
cell4 <- read.csv("data/cell4.csv")
cell5 <- read.csv("data/WT_cell5_v3.csv")
cell6 <- read.csv("data/WT_cell6_v3.csv")
cell7 <- read.csv("data/WT_cell7_v3.csv")
cell8 <- read.csv("data/WT_cell8_v3.csv")
cell9 <- read.csv("data/WT_cell9_v3.csv")
cell_list <- list(cell1, cell2, cell3, cell4, cell5, cell6, cell7, cell8, cell9)
visual <- read.csv("data/visual_judgement.csv")
## Edit data
mvtime <- as.data.frame(data.table::fread("04_nomodel/nomodel_chloroplast_mvtime.csv"))
mvtime$distance <- as.numeric(c(cell1[30,-(1:2)], cell2[30,-(1:2)], cell3[30,-(1:2)], cell4[30,-(1:2)],
cell5[30,-(1:2)], cell6[30,-(1:2)], cell7[30,-(1:2)], cell8[30,-(1:2)],
cell9[30,-(1:2)]))
mvtime <- mvtime[!is.na(rowSums(mvtime)),]
## Boxplot of signaling speed
for(i in 1:9){
eval(parse(text = paste0("
lm_cell", i, " <- RobustLinearReg::siegel_regression(distance ~ start_time, data = mvtime[mvtime$cell==", i, ",])"
)))
}
signalingspeed <- c(lm_cell1$coefficients[2], lm_cell2$coefficients[2], lm_cell3$coefficients[2],
lm_cell4$coefficients[2], lm_cell5$coefficients[2], lm_cell6$coefficients[2],
lm_cell7$coefficients[2], lm_cell8$coefficients[2], lm_cell9$coefficients[2])
df_sig <- data.frame(category = rep("Cell 1-9", 9),
signalingspeed = signalingspeed)
g_sig <- ggplot(df_sig, aes(x = category, y = signalingspeed)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 0.8, alpha = 0.5) +
theme_bw() +
theme(plot.title=element_text(size=7),
axis.title.y=element_text(size=7),
axis.title.x=element_blank(),
axis.text=element_text(size=7),
plot.tag = element_text(size = 12, face = "bold")) +
labs(y=bquote(paste("Signal transfer speed ", (mu*m/min), sep = "")))
g_sig
df_sig
quantile(df_sig$signalingspeed)
data("Paramecium")
Paramecium
Paramecium[,1:3]
citation(RobustLinearReg)
citation("RobustLinearReg")
citation("exactRankTests")
# Load packages
library(cellssm)
library(ggplot2)
# Load data
cell1 <- read.csv("data/WT_cell1_v4.csv")
cell2 <- read.csv("data/cell2.csv")
cell3 <- read.csv("data/cell3.csv")
cell4 <- read.csv("data/cell4.csv")
cell5 <- read.csv("data/WT_cell5_v3.csv")
cell6 <- read.csv("data/WT_cell6_v3.csv")
cell7 <- read.csv("data/WT_cell7_v3.csv")
cell8 <- read.csv("data/WT_cell8_v3.csv")
cell9 <- read.csv("data/WT_cell9_v3.csv")
cell_list <- list(cell1, cell2, cell3, cell4, cell5, cell6, cell7, cell8, cell9)
visual <- read.csv("data/visual_judgement.csv")
### Predict movement (best parameters)
df_cor <- as.data.frame(data.table::fread(file = paste0(out, "/grid_cor_mae_rmse.csv")))
# Create output directory
out <- "04_nomodel"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
### Predict movement (best parameters)
df_cor <- as.data.frame(data.table::fread(file = paste0(out, "/grid_cor_mae_rmse.csv")))
df_cor <- df_cor[df_cor$no_data>100,]
#df_cor <- df_cor[df_cor$consecutive==1,]
df_cor_best1 <- df_cor[which.max(df_cor$cor),]
df_cor_best2 <- df_cor[which.min(df_cor$mae),]
df_cor_best3 <- df_cor[which.min(df_cor$rmse),]
df_cor_best4 <- df_cor[which.max(df_cor$no_perfect),]
df_cor_best <- df_cor_best3
df_cor_best
sum(cell_list[[1]]$ex == 1)
# Load packages
library(cellssm)
library(tidyverse)
library(patchwork)
library(gt)
# Create output directory
out <- "14_signal_pairwise"
if(file.exists(out)==F){
dir.create(out, recursive=T)
}
# Load plot function
source("functions/Plot_functions.R")
# Load data
cell1 <- read.csv("data/WT_cell1_v4.csv")
cell2 <- read.csv("data/cell2.csv")
cell3 <- read.csv("data/cell3.csv")
cell4 <- read.csv("data/cell4.csv")
cell5 <- read.csv("data/WT_cell5_v3.csv")
cell6 <- read.csv("data/WT_cell6_v3.csv")
cell7 <- read.csv("data/WT_cell7_v3.csv")
cell8 <- read.csv("data/WT_cell8_v3.csv")
cell9 <- read.csv("data/WT_cell9_v3.csv")
cell_list <- list(cell1, cell2, cell3, cell4, cell5, cell6, cell7, cell8, cell9)
mvtime <- as.data.frame(data.table::fread("04_nomodel/nomodel_chloroplast_mvtime.csv"))
## Edit data
mvtime$distance <- as.numeric(c(cell1[30,-(1:2)], cell2[30,-(1:2)], cell3[30,-(1:2)], cell4[30,-(1:2)],
cell5[30,-(1:2)], cell6[30,-(1:2)], cell7[30,-(1:2)], cell8[30,-(1:2)],
cell9[30,-(1:2)]))
mvtime <- mvtime[!is.na(rowSums(mvtime)),]
## Line plot (x: start time, y: distance) for aligned chloroplasts
df_align <- as.data.frame(data.table::fread("data/chl_align.csv"))
## All combinations
no_combs <- NULL
no_posis <- NULL
no_negas <- NULL
for(i in 1:9){
data <- mvtime[mvtime$cell==i,]
align <- as.data.frame(t(combn(x = data$chloroplast, m = 2)))
names(align) <- c("from", "to")
no_combs <- c(no_combs, nrow(align))
no_positive <- 0
no_negative <- 0
for(j in 1:nrow(align)){
x_from <- data[data$chloroplast == align$from[j],"start_time"]
x_to <- data[data$chloroplast == align$to[j],"start_time"]
y_from <- data[data$chloroplast == align$from[j],"distance"]
y_to <- data[data$chloroplast == align$to[j],"distance"]
if((y_to - y_from) / (x_to - x_from) >= 0){
no_positive <- no_positive + 1
}else{
no_negative <- no_negative + 1
}
}#for(j in 1:nrow(align)){
no_posis <- c(no_posis, no_positive)
no_negas <- c(no_negas, no_negative)
}#for(i in 1:9){
sum_no_combs <- sum(no_combs)
sum_no_posis <- sum(no_posis)
sum_no_negas <- sum(no_negas)
## aligned
no_combs <- NULL
no_posis <- NULL
no_negas <- NULL
for(i in 1:9){
data <- mvtime[mvtime$cell==i,]
align <- df_align[df_align$cell==i,]
rem_chl <- base::setdiff(unique(c(align$from, align$to)), data$chl)
if(length(rem_chl) != 0){
align <- align[!(align$from==rem_chl | align$to==rem_chl),]
}
no_combs <- c(no_combs, nrow(align))
no_positive <- 0
no_negative <- 0
for(j in 1:nrow(align)){
if(sum(data$chloroplast == align$from[j]) > 0 & sum(data$chloroplast == align$to[j]) > 0){
x_from <- data[data$chloroplast == align$from[j],"start_time"]
x_to <- data[data$chloroplast == align$to[j],"start_time"]
y_from <- data[data$chloroplast == align$from[j],"distance"]
y_to <- data[data$chloroplast == align$to[j],"distance"]
if((y_to - y_from) / (x_to - x_from) >= 0){
no_positive <- no_positive + 1
}else{
no_negative <- no_negative + 1
}
}#if(sum(data$chloroplast ==
}#for(j in 1:nrow(align)){
no_posis <- c(no_posis, no_positive)
no_negas <- c(no_negas, no_negative)
}#for(i in 1:9){
sum_no_align <- sum(no_combs)
sum_no_align_posis <- sum(no_posis)
sum_no_align_negas <- sum(no_negas)
sum_no_notalign_posis <- sum_no_posis - sum_no_align_posis
sum_no_notalign_negas <- sum_no_negas - sum_no_align_negas
sum_no_notalign <- sum_no_notalign_posis + sum_no_notalign_negas
df_chi <- data.frame(align = rep(c("yes", "no"), 2),
sign = rep(c("posi", "nega"), each = 2),
num = c(sum_no_align_posis, sum_no_notalign_posis,
sum_no_align_negas, sum_no_notalign_negas))
xtab_chi <- stats::xtabs(formula = num~., data = df_chi)
(fisher_res <- fisher.test(xtab_chi))
names(fisher_res)
help(fisher.test)
